:javascript
  $(function() {
    const selectProduct = $('#transaction_detail_product_id');
    const inputQuantity = $('#transaction_detail_quantity');
    const inputUnitPrice = $('#transaction_detail_unit_price');
    const inputTotal = $('#transaction_detail_total');
    console.log(gon.transaction_type);
    selectProduct.select2();
    selectProduct.on('change', function() {
      const selectedItem = selectProduct.find(':selected');
      inputUnitPrice.val('');
      inputQuantity.val('');
      inputTotal.val('');
      $.get('/products/'+ selectedItem.val(), function(data) {
        console.log(data);
        $('#transaction_detail_unit_price').val(data.price);
        inputQuantity.val(1).keyup();
      }, 'json');
      $('#transaction_detail_total').val('');
    });
    inputQuantity.keyup(function() {
      var unitPrice = $('#transaction_detail_unit_price').val();
      var quantity = inputQuantity.val();
      var total = unitPrice * quantity;
      $('#transaction_detail_total').val(total);
    });
    if (gon.transaction_type == 2) {
      inputQuantity.keydown(function() {
        var selectedProductId = selectProduct.find(':selected').val();
        $.get("#{api_v1_product_availability_path}", 
              { productId: selectedProductId }, 
              function(data) {
                $('#lblError').remove();
                if (data.quantity < parseInt(inputQuantity.val())) {
                  $('input[type=submit]').prop('disabled', true);
                  inputQuantity.after('<label style="color: red;" id="lblError"><br/>La cantidad solicitada no esta disponible. En stock: ' + parseInt(data.quantity) + '</label>');
                  $('#formGroupQty').addClass('has-warning');
                } else {
                  $('#lblError').remove();
                  $('#formGroupQty').removeClass('has-warning');
                  $('input[type=submit]').prop('disabled', false);
                }
              });
      });
    }
  });

- model_class = Transaction
= bootstrap_card_collapse t('general.datos') do 
  = form_for [transaction, transaction_detail] do |f|
    - if transaction_detail.errors.any?
      = bootstrap_error_alert 'danger' do 
        #error_explanation
          %h5
            = t('activerecord.errors.messages.record_invalid', errors: pluralize(transaction_detail.errors.count, "error"))
          %ul
            - transaction_detail.errors.full_messages.each do |message|
              %li= message
    .form-group
      = f.label :product_id
      = f.collection_select :product_id, Product.active, :id, :description, { prompt: true }, { class: 'form-control' }
    .form-group
      = f.label :unit_price
      = f.text_field :unit_price, class: 'form-control', disabled: true
    .form-group{class: 'formGroupQty'}
      = f.label :quantity
      = f.number_field :quantity, class: 'form-control', step: :any, 'data-parsley-type': :number, onkeypress: 'return event.charCode >= 48 && event.charCode <= 57', min: 1, required: true
    .form-group
      = f.label :total
      = f.number_field :total, class: 'form-control', step: :any, 'data-parsley-type': :number, disabled: true
    .actions
      = bootstrap_submit_button(f, t('helpers.links.add'))
      = bootstrap_button('primary', t('helpers.links.back'), 'fa-arrow', transaction_transaction_details_path(transaction))
