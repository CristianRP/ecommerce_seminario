:javascript
  $(function() {
    $('select').select2({
      theme: "bootstrap",
      width: '100%'
    });
    if (gon.is_grocer)
      $('#transaction_type_id').val(gon.type_param);
    else
      $('#transaction_type_id').val(gon.type_param.type);
    $('#checkSameAddress').change(function() {
      if ($(this).is(':checked')) {
        $('#transaction_address2').val($('#transaction_address').val());
      } else {
        $('#transaction_address2').val('').prop('disabled', false);
      }
    });
    if (!gon.is_grocer) { return; }
    $('#transaction_carrier_id').val(gon.carrier_id);
    $('#transaction_carrier_id').change(function() {
      var dataInternal = $(this).find(':selected').data('internal');
      if (gon.internal_delivery) {
        $('#courier_group').show();
        $('#cargo_expreso_form').hide();
      }
      if (dataInternal) {
        $('#courier_group').show();
        $('#cargo_expreso_form').hide();
      } else if (dataInternal === undefined) {
        $('#courier_group').hide();
        $('#cargo_expreso_form').hide();
      } else {
        $('#courier_group').hide();
        $('#cargo_expreso_form').show();
      }
    });

    const serviceTypeSelect = $('#transaction_delivery_service_type');
    const department_select = $('#transaction_delivery_departments');
    const municipalities_select = $('#transaction_delivery_municipalities');
    department_select.change(function () {
      $.get('/municipalities_list/', { department_id: $(this).find(':selected').val() }, function(data) {
        municipalities_select.val(null).trigger('change');
        municipalities_select.empty();
        municipalities_select.select2({data: data});
        municipalities_select.val(1).trigger('change');
        serviceTypeSelect.val(3).trigger('change');
      });
    });

    const village_select = $('#transaction_delivery_populated_receiver_id');
    municipalities_select.change(function() {
      console.log($(this).find(':selected').val());
      $.get('/villages_list/', { department_id: department_select.find(':selected').val(),  municipality_id: $(this).find(':selected').val() }, function(data) {
        village_select.val(null).trigger('change');
        village_select.empty();
        village_select.select2({data: data});
        village_select.val(1).trigger('change');
      });
    });

    $('#transaction_carrier_id').trigger('change');

  });
- model_class = Transaction
= bootstrap_card_collapse t('general.datos') do 
  = form_with(model: transaction, local: true, class: 'form') do |f|
    - if transaction.errors.any?
      = bootstrap_error_alert 'danger' do 
        #error_explanation
          %h5
            = t('activerecord.errors.messages.record_invalid', errors: pluralize(transaction.errors.count, "error"))
          %ul
            - transaction.errors.full_messages.each do |message|
              %li= message
    .form-group
      .row.row-custom
        .col
          = f.label :description
        .col
          %div{hidden: true}
            = bootstrap_text_field(f, :type_id, model_class.human_attribute_name(:type_id))
          = bootstrap_text_field(f, :description, model_class.human_attribute_name(:description))
    - unless params['type'].present? && !params['type'].nil?
      .form-group
        .row.row-custom
          .col
            = f.label :client
          .col
            = bootstrap_text_field(f, :client, model_class.human_attribute_name(:client))
      .form-group
        .row.row-custom
          .col
            = f.label :address
          .col
            = bootstrap_text_field(f, :address, model_class.human_attribute_name(:address))
          .col
            .checkbox.help-block
              %label
                %input{type: 'checkbox', id: 'checkSameAddress'}= t('activerecord.attributes.transaction.same_address')
      .form-group
        .row.row-custom
          .col
            = f.label :address2
          .col
            = bootstrap_text_field(f, :address2, model_class.human_attribute_name(:address2))
      .form-group
        .row.row-custom
          .col
            = f.label :phone
          .col
            = bootstrap_text_field(f, :phone, model_class.human_attribute_name(:phone))
      .form-group
        .row.row-custom
          .col
            = f.label :carrier
          .col
            = f.select :carrier_id, options_for_select(Carrier.all.map {|c| [c.name, c.id, {'data-internal' => c.internal}]}), prompt: true
      .form-group#courier_group{hidden: true}
        .row.row-custom
          .col
            = f.label t('general.carier')
          .col
            = f.collection_select :courier_id, Dealer.couriers, :id, :name, { prompt: true }, { class: 'form-control' }
      .form-group#cargo_expreso_form{hidden: true}
        = f.fields_for :delivery do |d|
          .form-group
            .row.row-custom
              .col
                = d.label t('activerecord.attributes.delivery.receiver_nit')
              .col
                = bootstrap_text_field(d, :receiver_nit, Delivery.human_attribute_name(:receiver_nit))
          .form-group
            .row.row-custom
              .col
                = d.label t('activerecord.attributes.delivery.department')
              .col
                = d.collection_select :departments, Department.all, :cod, :custom_name, { prompt: true }, { class: 'form-control' }
          .form-group
            .row.row-custom
              .col
                = d.label t('activerecord.attributes.delivery.municipality')
              .col
                = d.collection_select :municipalities, [], :cod, :text, { prompt: true }, { class: 'form-control' }
          .form-group
            .row.row-custom
              .col
                = d.label t('activerecord.attributes.delivery.populated_receiver_id')
              .col
                = d.collection_select :populated_receiver_id, [], :cod, :text, { prompt: true }, { class: 'form-control' }
          .form-group
            .row.row-custom
              .col
                = d.label t('activerecord.attributes.delivery.service_type')
              .col
                = d.collection_select :service_type, Parameter.service_types, :int_value, :text_value, { prompt: true }, { class: 'form-control' }
          - if false
            .form-group
              .row.row-custom
                .col
                  = d.label t('activerecord.attributes.delivery.secured_amount')
                .col
                  = bootstrap_text_field(d, :secured_amount, Delivery.human_attribute_name(:secured_amount))
          .form-group
            .row.row-custom
              .col
                = d.label t('activerecord.attributes.delivery.observations')
              .col
                = bootstrap_text_field(d, :observations, Delivery.human_attribute_name(:observations))
          = d.fields_for :piece do |p|
            .form-group{hidden: true}
              .row.row-custom
                .col
                  = p.label t('activerecord.attributes.piece.weight')
                .col
                  = bootstrap_text_field(p, :weight, Piece.human_attribute_name(:weight))
    .text-right
      %br
      = bootstrap_button('primary', t('helpers.links.back'), 'arrow-left', transactions_path)
      - if current_dealer.grocer?
        = bootstrap_submit_button(f, t('helpers.submit.update', model: model_class.name))
      - else
        = bootstrap_submit_button(f, t('helpers.links.next'))
    